class Tool(models.Model):
    title = models.CharField(max_length=200)
    short_description = models.CharField(max_length=300)
    image = models.ImageField(upload_to='tools_images/')
    detailed_content = models.TextField()
    
    category = models.CharField(max_length=100, default='General')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('tools:tool_detail', kwargs={'pk': self.pk})
from django.db import models
from django.urls import reverse
from django.contrib.auth.models import User
from django.utils import timezone

class Tool(models.Model):
    title = models.CharField(max_length=200)
    short_description = models.CharField(max_length=300)
    image = models.ImageField(upload_to='tools_images/')
    detailed_content = models.TextField()

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('tools:tool_detail', kwargs={'pk': self.pk})

class PremiumRequest(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='premium_requests')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    requested_at = models.DateTimeField(auto_now_add=True)
    reviewed_at = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"Premium request by {self.user.username} - {self.status}"

class ToolReview(models.Model):
    tool = models.ForeignKey(Tool, on_delete=models.CASCADE, related_name='reviews')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='tool_reviews')
    rating = models.PositiveSmallIntegerField()
    review_text = models.TextField(blank=True)
    created_at = models.DateTimeField(default=timezone.now)

    class Meta:
        unique_together = ('tool', 'user')

    def __str__(self):
        return f"Review by {self.user.username} for {self.tool.title}"
